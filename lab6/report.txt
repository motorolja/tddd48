TDDD48 - Lab6 Report

Questions:

In the report, write which planners you have chosen and describe how
they work in general terms. Also report your findings when it comes to
plan quality, generated states and time used by the planner. Select at
least 3 different planners that you run on the same problems.

##############################
Domains (Problems):
1. Maze_planar, Robot = default
2. Pipedream_ring, Robot = default

##############################
Planners:

1. TRRT
------------
TRRT is a sub-branch of RRT (Rapidly-exploring Random Trees), and it
randomly chooses a new node and then tries to connect the new node to
the existing tree by using these criteria:
    1) The new node must have a valid position and path (collision
        detection)
    2) The new node should not be close to another already existing
        node.
    3) The new node cannot be too far from the node of origin, if it
    is, interpolate the random new node with the closest node and
    choose the interpolation point as the new node.

This process is repeated until a terminating condition is fulfilled,
where the terminating state is either out of time or goal is found.

------------
Pipedream:
Times(s) - 0.3, 0.4, 0.5, 0.5, 0.5, 0.6, 0.6, 0.7, 0.8, 0.9
Generated states per second - ~2800
Solutions - All have been pretty much the same and a solution was
always found.

------------
Maze:
Times(s) - 0.21, 0.24, 0.24, 0.33, 0.39, 0.44, 0.48,
           0.52, 0.55, 0.56, 0.68, 0.72, 0.72, 0.74 
Generated states per second - ~2500
Solutions - All have been pretty much the same and a solution was
always found. Finds the optimal solution most of the time. The
suboptimal solutions were always relatively low-cost.

##############################
2. SPARS2
------------
SPARS2 works by adding random uniform distributed nodes at unblocked
areas, and then connect these nodes between each others to generate a
road map. Since the nodes are randomly distributed among the entire
search space it is not very reliable in the path being found, but
requires a very small amount of states.

------------
Pipedream:
Times(s) - 7, 16, 16, 17, 19, 24, 25, 27, 28, 44
Generated states - ~140
Solutions - All have been pretty much the same and a solution was
always found.

------------
Maze:
Times(s) - 0.7, 0.8, 1.1, 1.2, 1.2, 1.3, 1.5, 1.6, 1.8, 3.0, 
Generated states - 70 
Solutions - The suboptimal solutions found ranged from low to high
cost. Most solutions found were suboptimal, whereas only a few had
close to optimal cost. A solution was always found, and the time taken
to find a solution did not vary too much.

##############################
3.STRIDE
------------
The documentation of STRIDE is not very clear to understand, at least
not without having any deeper knowledge from before. STRIDE seems to
be very similar to EST (Expansive Space Trees), but chooses more
specific nodes to expand towards instead of looking equally to each
direction.
From the documentation it can be seen that STRIDE seems to have the
best time complexity when the dimensions increase in the problem. This
could not be tested since our problem domains only included
two-dimensional and three-dimensional problems to solve.

------------
Pipedream:
Times(s) - 1, 3, 3, 4, 5, 6, 6, 8, 10, 11
Generated states per second - ~600
Solutions - All are more or less the same and a solution was always
found. Generated solutions are less wobbly than for other algorithms,
due to more states around the chosen path which makes interpolation of
states much smoother.

------------
Maze:
Times(s) - 0.3, 0.3, 0.4, 0.4, 0.4, 0.8, 1.3, 
           1.7, 1.8, 2.2, 2.2, 3.4, 3.8, 4.3, 
           7.3, 8.2, 9.3, 9.3
Generated states per second - 1000-1800
Solutions - The solutions that were found fast did not explore areas
in the "wrong" direction that much, instead they quickly found the
correct path by accident. The searches that took longer time explored
a lot of unnecessary areas.



##############################
Summary
------------
STRIDE and TRRT generated about the same amount of states while SPARS2
had a considerable smaller amount of states. This is because SPARS2
expands from random points that are evenly distributed over the
domain, while the other planners does a variant of depth search
starting from the initial position.
What could be found is that TRRT and STRIDE in general manage to
generate a lot better plans than SPARS2, which should not be a
surprise since SPARS2 connects random points and continues to add more
points until a complete path can be found.

From the data received using these three algorithms on both of our
domains, we concluded that TRRT generated the paths most stable and in
a very precise duration.
SPARS2, with the random nodes, used the least states, but was not able
to neither generate good and accurate results, nor have a stable time
required.
STRIDE was able to generate good results, but the algorithm was not as
stable as TRRT, still better than SPARS2 on our two chosen problem
domains.
