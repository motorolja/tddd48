TDDD48 - Lab 5 Report

Questions:
1: Compare planning with TLPlan to what you did previously in PDDL and HTN. Was it
easier/harder to get good plans? 

Much harder since we needed to constantly check the output for missed cases and
change the problem domain in a way which guarantee that the created rule was
checked against. Many edge cases for specifying forbidden moves/actions were
cumbersome to fix because they were not obvious. 
It was also difficult to verify which part of the rules that are used for
certain decisions of the planner, and thus generating the later rules became
more difficult.

2: List the control rules you used.
#########################################
# Code start
#########################################
 (set-tl-control 
	 (always (and 
			
            ;Only pickup a type if there is some place to deliver it
            (forall (?u) (uav ?u) (?t) (type ?t)
                (implies 
                    (and
                        (not(exists (?x) (location ?x) (not (= (cratesUndelivered ?t ?x) 0))))
                    )
            	    (
                        next (not (carrying ?u ?t))
                    )
                )
            )

            ; Drop carried item if uav is in a location where it is
            ; needed
            (forall (?u) (uav ?u) (?t) (type ?t) (?l) (location ?l)
            	 (implies 
                    (and
                        (carrying ?u ?t)
                        (loc ?u ?l)
                        (> (cratesUndelivered ?t ?l) 0)
                    )
            		( next 
                        (and
                            (empty ?u)
                        )
                    )
                )
            )

            ; Do not go to a location where the carried item is not
            ; needed
            (forall (?u) (uav ?u) (?t) (type ?t) (?l) (location ?l)
            	 (implies 
                    (and
                        (carrying ?u ?t)
                        (not (loc ?u ?l))
                        (= (cratesUndelivered ?t ?l) 0)
                    )
            		( next 
                        (and
                            (not (loc ?u ?l))
                        )
                    )
                )
            )

            ; Return uav to depot if it is not in a depot and uav is
            ; empty or holding an empty carrier
            ; and there is no carrier in the location
            (forall (?u) (uav ?u) (?l) (location ?l)
            	 (implies 
                    (and
                        (or
                            (empty ?u)
                            (exists (?c) (carrier ?c)
                                (and
                                    (carrying ?u ?c)
                                    (= (used ?c) 0)
                                )
                            )
                        )
                        (not (exists (?c) (carrier ?c)
                            (loc ?c ?l)
                        ))
                        (not (exists (?d) (depot ?d)
                            (loc ?d ?l)
                        ))
                    )
            		( next 
                        (and
                            (not (loc ?u ?l))
                        )
                    )
                )
            )

            ; Pick up empty carrier if outside of depot
            (forall (?c) (carrier ?c) (?u) (uav ?u) (?l) (location ?l)
                (implies
                    (and
                        (loc ?u ?l)
                        (loc ?c ?l)
                        (empty ?u)
                        (not (exists (?d) (depot ?d)
                            (loc ?d ?l)
                        ))
                        (= (used ?c) 0)
                    )
                    (next
                        (carrying ?u ?c)
                    )
                )
            )


            ; Continue to pick up the same item and load to
            ; a carrier if you have already started loading one
            (forall (?u) (uav ?u) (?t) (type ?t)
                (implies
                    (and
                        (empty ?u)
                        (exists (?c) (carrier ?c)
                            (and
                                (> (used ?c) 0)
                                (not(= (boxcount ?c ?t) (used ?c)))
                            )
                        )
                    )
                    (next
                        (not (carrying ?u ?t))
                    )
                )
            )

            ; rule forcing a uav to move to a location with only one
            ; undelivered resource of a specific type missing
            (forall (?u) (uav ?u) (?t) (type ?t)
            	 (implies 
                    (and
                        (carrying ?u ?t)
                        (exists (?l) (location ?l)
                            (= (cratesUndelivered ?t ?l) 1)
                        )
                        (not (exists (?l) (location ?l) 
                            (and 
                                (> (cratesUndelivered ?t ?l) 0)
                                (loc ?u ?l)
                            )
                        ))
                    )
            		( next 
                        (exists (?l) (location ?l) 
                            (and 
                                (loc ?u ?l) 
                                (= (cratesUndelivered ?t ?l) 1)
                            )
                        )
                    )
                )
            )

            ; rule not allowing uav to go to a location where there is
            ; already another uav, excluding if there is a depot in
            ; that location
            (forall (?u) (uav ?u) (?l) (location ?l)
                (implies
                    (and
                        (not (loc ?u ?l))
                        (not (exists (?d) (depot ?d)
                            (and
                                (loc ?d ?l)
                            )
                        ))
                        (exists (?u2) (uav ?u2)
                            (and
                                (loc ?u2 ?l)
                            )
                        )
                    )
                    (next
                        (not (loc ?u ?l))
                    )
                )
            )

            ; rule not allowing a uav to pick up something if there is
            ; one already holding in something
            (forall (?u) (uav ?u)
                (implies
                    (and
                        (empty ?u)
                        (exists (?u2) (uav ?u2)
                            (not (empty ?u2))
                        )
                    )
                    (next
                        (empty ?u)
                    )
                )
            )


            ; rule picking up carrier having enough for any location
            (forall (?c) (carrier ?c)
                (implies
                    (and
                        (> (used ?c) 1)
                        (exists (?l) (location ?l)
                            (and
                                (loc ?c ?l)
                                (exists (?d) (depot ?d)
                                    (and
                                        (loc ?d ?l)
                                    )
                                )
                            )
                        )
                        (exists (?l) (location ?l)
                            (exists (?t) (type ?t)
                                (and
                                    (> (cratesUndelivered ?t ?l) 1)
                                    (= (boxcount ?c ?t) (cratesUndelivered ?t ?l))
                                )
                            )
                        )
                    )
                    (next
                        (exists (?u) (uav ?u)
                            (carrying ?u ?c)
                        )
                    )
                )
            )


            ; rule picking up full carrier
            (forall (?c) (carrier ?c)
                (implies
                    (and
                        (= (unused ?c) 0)
                        (exists (?l) (location ?l)
                            (and
                                (loc ?c ?l)
                                (exists (?d) (depot ?d)
                                    (loc ?d ?l)
                                )
                            )
                        )
                        (exists (?l) (location ?l)
                            (exists (?t) (type ?t)
                                (and
                                    (> (cratesUndelivered ?t ?l) (used ?c))
                                    (= (boxcount ?c ?t) (used ?c))
                                )
                            )
                        )
                    )
                    (next
                        (exists (?u) (uav ?u)
                            (carrying ?u ?c)
                        )
                    )
                )
            )


            ; do not go to a location with single item if not only one
            ; item is needed
            (forall (?u) (uav ?u) (?t) (type ?t) (?l) (location ?l)
                (implies
                    (and
                        (carrying ?u ?t)
                        (not (loc ?u ?l))
                        (not (= (cratesUndelivered ?t ?l) 1))
                    )
                    (next
                        (not (loc ?u ?l))
                    )
                )
            )

            
            ; If carrier in location with items, unload if needed
            (forall (?c) (carrier ?c) (?u) (uav ?u) (?t) (type ?t)
            (?l) (location ?l)
                (implies
                    (and
                        (empty ?u)
                        (> (boxcount ?c ?t) 0)
                        (> (cratesUndelivered ?t ?l) 0)
                        (loc ?u ?l)
                        (loc ?c ?l)
                    )
                    (next
                        (carrying ?u ?t)
                    )
                )
            )

            ; rule to load only a single carrier
            (forall (?c) (carrier ?c) (?l) (location ?l)
                (implies
                    (and
                        (loc ?c ?l)
                        (exists (?c2) (carrier ?c2)
                            (and
                                (loc ?c2 ?l)
                                (> (used ?c2) (used ?c))
                            )
                        )
                        (exists (?d) (depot ?d)
                            (loc ?d ?l)
                        )
                    )
                    (next
                        (and
                            (= (used ?c) 0)
                        )
                    )
                )
            )

            ; rule to drop carrier at needed location
            (forall (?c) (carrier ?c) (?u) (uav ?u) (?l) (location ?l)
                (implies
                    (and
                        (carrying ?u ?c)
                        (loc ?u ?l)
                        (> (used ?c) 0)
                        (exists (?t) (type ?t)
                            (and
                                (> (cratesUndelivered ?t ?l) 0)
                                (> (boxcount ?c ?t) 0)
                            )
                        )
                    )
                    (next
                        (loc ?c ?l)
                    )
                )
            )

            ; rule for moving a loaded carrier to a location
            (forall (?c) (carrier ?c) (?u) (uav ?u) (?l) (location ?l)
                (implies
                    (and
                        (carrying ?u ?c)
                        (> (used ?c) 0)
                        (not (loc ?u ?l))
                        (not(exists (?t) (type ?t)
                            (and
                                (> (cratesUndelivered ?t ?l) 0)
                                (or
                                    (= (boxcount ?c ?t) (cratesUndelivered ?t ?l))
                                    (and
                                        (= (unused ?c) 0)
                                        (= (boxcount ?c ?t) (used ?c))
                                        (> (cratesUndelivered ?t ?l) (used ?c))
                                    )
                                )
                            )
                        ))
                    )
                    (next
                        (not (loc ?u ?l))
                    )
                )
            )

 )

#########################################
# Code end
#########################################
3: Was it possible to get TLPlan to use carriers in an efficient way?

Yes, we were able to use carriers which delivers multiple items of a specific
type whenever 2 or more items is required of that type for that location.
The carriers are not able to combine different items and deliver a bunch of
different items to a location.


4: Report on any changes you had to make to the original problem in order to get
plans with/without carriers. 

We did no changes to the original domain.