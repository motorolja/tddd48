; Variable abbreviations:
; c - carrier
; l - location
; t - resource type
; u - uav
; d - depot

(clear-world-symbols)			;Remove old domain symbols

(declare-described-symbols
	;typing 
	(predicate uav 1)
	(predicate depot 1)
	(predicate location 1)
	(predicate type 1)
	(predicate carrier 1)

	;predicates
	(predicate loc 2)
	(predicate empty 1)
	(predicate carrying 2)

	;functions
	(function boxcount 2)
	(function used 1)
	(function unused 1)
	(function cratesUndelivered 2)
)

 (set-tl-control 
	 (always (and 
			
; WORKING   ;Only pickup a type if there is some place to deliver it
	        (forall (?u) (uav ?u) (?t) (type ?t)
		        (implies 
                    (and
                        (not(exists (?x) (location ?x) (not (= (cratesUndelivered ?t ?x) 0))))
                    )
				    (
                        next (not (carrying ?u ?t))
                    )
                )
            )

; WORKING   ; Drop carried item if uav is in a location where it is
            ; needed
		    (forall (?u) (uav ?u) (?t) (type ?t) (?l) (location ?l)
		    	 (implies 
                    (and
                        (carrying ?u ?t)
                        (loc ?u ?l)
                        (> (cratesUndelivered ?t ?l) 0)
                    )
		    		( next 
                        (and
                            (empty ?u)
                        )
                    )
                )
            )

; WORKING   ; Do not go to a location where the carried item is not
            ; needed
		    (forall (?u) (uav ?u) (?t) (type ?t) (?l) (location ?l)
		    	 (implies 
                    (and
                        (carrying ?u ?t)
                        (not (loc ?u ?l))
                        (= (cratesUndelivered ?t ?l) 0)
                    )
		    		( next 
                        (and
                            (not (loc ?u ?l))
                        )
                    )
                )
            )

; WORKING   ; Return uav to depot if it is not in a depot and uav is
            ; empty or holding an empty carrier
            ; and there is no carrier in the location
	        (forall (?u) (uav ?u) (?l) (location ?l)
	        	 (implies 
                    (and
                        (or
                            (empty ?u)
                            (exists (?c) (carrier ?c)
                                (and
                                    (carrying ?u ?c)
                                    (= (used ?c) 0)
                                )
                            )
                        )
                        (not (exists (?c) (carrier ?c)
                            (loc ?c ?l)
                        ))
                        (not (exists (?d) (depot ?d)
                            (loc ?d ?l)
                        ))
                    )
	        		( next 
                        (not (loc ?u ?l))
                    )
                )
            )

; UNCHECKED ; Pick up empty carrier if outside of depot
            (forall (?c) (carrier ?c) (?u) (uav ?u) (?l) (location ?l)
                (implies
                    (and
                        (not (exists (?d) (depot ?d)
                            (loc ?d ?l)
                        ))
                        (empty ?u)
                        (loc ?u ?l)
                        (loc ?c ?l)
                        (= (used ?c) 0)
                    )
                    (next
                        (carrying ?u ?c)
                    )
                )
            )


; UNCHECKED ; Continue to pick up the same item and load to
            ; a carrier if you have already started loading one
            (forall (?u) (uav ?u) (?t) (type ?t)
                (implies
                    (and
                        (empty ?u)
                        (exists (?c) (carrier ?c)
                            (and
                                (> (used ?c) 0)
                                (not(= (boxcount ?c ?t) (used ?c)))
                            )
                        )
                    )
                    (next
                        (not (carrying ?u ?t))
                    )
                )
            )

; WORKING   ; rule forcing a uav to move to a location with only one
            ; undelivered resource of a specific type missing
		    (forall (?u) (uav ?u) (?t) (type ?t)
		    	 (implies 
                    (and
                        (carrying ?u ?t)
                        (exists (?l) (location ?l)
                            (= (cratesUndelivered ?t ?l) 1)
                        )
                        (not (exists (?l) (location ?l) 
                            (and 
                                (> (cratesUndelivered ?t ?l) 0)
                                (loc ?u ?l)
                            )
                        ))
                    )
		    		( next 
                        (exists (?l) (location ?l) 
                            (and 
                                (loc ?u ?l) 
                                (= (cratesUndelivered ?t ?l) 1)
                            )
                        )
                    )
                )
            )

; WORKING   ; rule not allowing uav to go to a location where there is
            ; already another uav, excluding if there is a depot in
            ; that location
            (forall (?u) (uav ?u) (?l) (location ?l)
                (implies
                    (and
                        (not (loc ?u ?l))
                        (not (exists (?d) (depot ?d)
                            (and
                                (loc ?d ?l)
                            )
                        ))
                        (exists (?u2) (uav ?u2)
                            (and
                                (loc ?u2 ?l)
                            )
                        )
                    )
                    (next
                        (not (loc ?u ?l))
                    )
                )
            )

; WORKING   ; rule not allowing a uav to pick up something if there is
            ; one already holding in something
            (forall (?u) (uav ?u)
                (implies
                    (and
                        (empty ?u)
                        (exists (?u2) (uav ?u2)
                            (not (empty ?u2))
                        )
                    )
                    (next
                        (empty ?u)
                    )
                )
            )


; WORKING   ; rule picking up carrier
            (forall (?c) (carrier ?c)
                (implies
                    (and
                        (> (used ?c) 1)
                        (exists (?l) (location ?l)
                            (and
                                (loc ?c ?l)
                                (exists (?d) (depot ?d)
                                    (and
                                        (loc ?d ?l)
                                    )
                                )
                            )
                        )
                        (exists (?l) (location ?l)
                            (exists (?t) (type ?t)
                                (and
                                    (> (cratesUndelivered ?t ?l) 1)
                                    (or
                                        (= (boxcount ?c ?t) (cratesUndelivered ?t ?l))
                                        (and
                                            (= (unused ?c) 0)
                                            (= (boxcount ?c ?t) (used ?c))
                                            (> (cratesUndelivered ?t ?l) (boxcount ?c ?t))
                                        )
                                    )
                                )
                            )
                        )
                    )
                    (next
                        (exists (?u) (uav ?u)
                            (carrying ?u ?c)
                        )
                    )
                )
            )


; WORKING   ; do not go to a location with single item if not only one
            ; item is needed
            (forall (?u) (uav ?u) (?t) (type ?t) (?l) (location ?l)
                (implies
                    (and
                        (carrying ?u ?t)
                        (not (loc ?u ?l))
                        (not (= (cratesUndelivered ?t ?l) 1))
                    )
                    (next
                        (not (loc ?u ?l))
                    )
                )
            )

            
; UNCHECKED ; If carrier in location with items, unload if needed
            (forall (?c) (carrier ?c) (?u) (uav ?u) (?t) (type ?t)
            (?l) (location ?l)
                (implies
                    (and
                        (empty ?u)
                        (> (boxcount ?c ?t) 0)
                        (> (cratesUndelivered ?t ?l) 0)
                        (loc ?u ?l)
                        (loc ?c ?l)
                    )
                    (next
                        (carrying ?u ?t)
                    )
                )
            )

; UNCHECKED ; rule to load only a single carrier
            (forall (?c) (carrier ?c) (?l) (location ?l)
                (implies
                    (and
                        (loc ?c ?l)
                        (exists (?c2) (carrier ?c2)
                            (and
                                (loc ?c2 ?l)
                                (> (used ?c2) (used ?c))
                            )
                        )
                        (exists (?d) (depot ?d)
                            (loc ?d ?l)
                        )
                    )
                    (next
                        (and
                            (= (used ?c) 0)
                        )
                    )
                )
            )

; UNCHECKED ; rule for moving a loaded carrier to a location
            (forall (?c) (carrier ?c) (?u) (uav ?u) (?l) (location ?l)
                (implies
                    (and
                        (carrying ?u ?c)
                        (not (loc ?u ?l))
                        (not(exists (?t) (type ?t)
                            (and
                                (> (boxcount ?c ?t) 0)
                                (> (cratesUndelivered ?t ?l) 0)
                                (or
                                    (= (boxcount ?c ?t) (cratesUndelivered ?t ?l))
                                    (and
                                        (= (unused ?c) 0)
                                        (= (boxcount ?c ?t) (used ?c))
                                        (> (cratesUndelivered ?t ?l) (boxcount ?c ?t))
                                    )
                                )
                            )
                        ))
                    )
                    (next
                        (not (loc ?u ?l))
                    )
                )
            )

 )))					


; Crates are picked up from the depot via this operator.
(def-adl-operator (pick-up-crate ?u ?l ?d ?t)
	(pre 
		(?u) (uav ?u)
		(?d) (depot ?d)
		(?l) (location ?l)
		(?t) (type ?t)
		
		(and 	(loc ?d ?l)
				(loc ?u ?l)
				(empty ?u)))
	
	(add	(carrying ?u ?t))
	
	(del 	(empty ?u))
)		

;Deliver a crate to a location where it is needed
(def-adl-operator (put-down-crate ?u ?l ?t)
	(pre 
		(?u) (uav ?u)
		(?l) (location ?l)
		(?t) (type ?t)
		
		(and 	(loc ?u ?l)
				(carrying ?u ?t)
				(not (= (cratesUndelivered ?t ?l) 0))))
	
	(add	(-= (cratesUndelivered ?t ?l) 1)
			(empty ?u))
	
	(del 	(carrying ?u ?t))
)		

;An empty UAV can picks up a carrier 
(def-adl-operator (pick-up-carrier ?u ?c ?l)
	(pre 
		(?u) (uav ?u)
		(?c) (carrier ?c)
		(?l) (location ?l)
		
		(and 	(loc ?c ?l)
				(loc ?u ?l)
				(empty ?u)))
	
	(add	(carrying ?u ?c))
	
	(del 	(empty ?u) (loc ?c ?l))
)

;A UAV holding a carrier can put it down
(def-adl-operator (put-down-carrier ?u ?c ?l)
	(pre 
		(?u) (uav ?u)
		(?c) (carrier ?c)
		(?l) (location ?l)
		
		(and 	(carrying ?u ?c)
				(loc ?u ?l)))
	
	(add	(loc ?c ?l)
			(empty ?u))
	
	(del 	(carrying ?u ?c))
)
          
;A UAV holding a crate can put it on a carrier
(def-adl-operator (load-carrier ?u ?c ?l ?t)
	(pre
		(?u) (uav ?u)
		(?c) (carrier ?c)
		(?l) (location ?l)
		(?t) (type ?t)

		(and  	(not (= (unused ?c) 0))
				(loc ?c ?l)
				(loc ?u ?l)
				(carrying ?u ?t)))
	(add
			(+= (used ?c) 1)
        	(-= (unused ?c) 1)
            (+= (boxcount ?c ?t) 1)
			(empty ?u))
			
	(del 
			(carrying ?u ?t))
)

;Pick a crate from a carrier
(def-adl-operator (unload-carrier ?u ?c ?l ?t)
	(pre
		(?u) (uav ?u)
		(?c) (carrier ?c)
		(?l) (location ?l)
		(?t) (type ?t)

		(and  	(empty ?u)
				(loc ?c ?l)
				(loc ?u ?l)
				(not (= (boxcount ?c ?t) 0))))
	(add
			(-= (used ?c) 1)
        	(+= (unused ?c) 1)
            (-= (boxcount ?c ?t) 1)
			(carrying ?u ?t))
			
	(del 
			(empty ?u))
)

; Fly a UAV 
(def-adl-operator (fly-to ?u ?from ?to)
	(pre
		(?u)    (uav ?u)
		(?from) (location ?from)
		(?to)   (location ?to)

		(and  	(loc ?u ?from)))

	(add	(loc ?u ?to))			
			
	(del 	(loc ?u ?from))
)
