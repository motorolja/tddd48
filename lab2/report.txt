NOTE:
To generate the problem files, run:
    python testhelper.py --build
and for part2-3:
    python testhelper.py --build
    python testhelper.py --build --testcases spmas_symba_testCases.info

#################################################################
Report answers:
2.1:

Run the problems you have created through the same (modern) planners
as before, and possibly a few additional planners. 

What plans are generated? 

For YAHSP3:
    The plans originally uses load-crate and unload-crate, but these
are executed inefficient, and are in later results completely
removed from the plan.

For bfs-f & bifd:
    These algorithms never use the carrier, at least not in the found
solutions.


Do they use the carriers?
Not in a useful way (YAHSP3).

Does this differ among different planners? 
Not among the ones we have analysed.

Discuss your findings briefly in your report for lab 2. 
    Generally, by using the carrier to temporarily store the crates for
moving them in a bundle costs more actions than it saves. For storing
and unloading the crates, two actions have to be added, plus the
action for moving the carrier to a given location.
    This will in the best case scenario result in 4.5 actions for
delivering a crate, assuming that both the uav and carrier should be
returned to the depot. 2 actions are for loading and unloading the
crate to a carrier, 2 actions for picking up and delivering a crate,
and 2 actions are needed to move the uav and carrier back and forth
(these last actions can be split to each crate, giving each crate a
cost of 0.5 actions). 
    For normal moving the cost is 4 actions. 2 for picking up and
delivering, and 2 to move the uav back and forth between the depot
and location.

2.2:

What plans are generated? Do they seem better than before? Do
helicopters use carriers in those cases where this is better according
to the distances (which may not always be the case, if destinations
are widely dispersed)? Discuss this briefly in your report.

For YAHSP3:
    When using YAHSP3, the planner does not care about optimizing
depending on total-cost and instead tries to return a plan with a
minimum amount of actions. This is due to the fact that YAHSP3 does
not consider conditionals. 

For bfs-f:
    The algorithm was unreliable, with random crashes from code
outside of our scope (returned error: double free or corruption).
The times it actually ran as long as it wanted the result did not
finish in the 65 seconds time limit that we have given it

For bifd:
    Algorithm proved to be stable, returning a correct solution and
having several results, all having a lower action cost than the
previous result, until it finds the best solution. The algorithm
does not scale well with complexity when it was compared with both
spmas, symba-1 and symba-2, which all three was able to find an
optimal solution in a matter of seconds on the problems provided where
bifd timed out (used 65+ seconds).



Our flying costs (same cost with and without carrier):
    location -> depot = 25
    depot -> location = 25
    depot -> depot 0
    locationA -> locationB = 10
    locationA -> locationA = 0

Other actions: 5


2.3:


Test the performance of these planners on your domain and problems, in
terms of speed and quality. Are the plans better, and if so, how much
better? Does it take more time? Do you think it is worth it for this
domain? Discuss this briefly in your report.

YAHSP3 did not provide a good quality plan. The plan provided was not
optimized in a cost perspective, and thus did not solve it correctly.
bfs-f failed to run most of the time, and when it did it timed out
(used 65+ seconds) due to too long planning time before finding the
most optimal solution.  
bifd was able to solve the problems provided, without any crashes
while planning, but it was very slow, and timed out on most of the
tests.
spmas, symba-1 and symba-2 were all able to solve even the most
difficult of our problems in a matter of seconds, and the time taken
for all three of these algorithms was very similar. The solutions
found from all the provided problems were optimal for minimizing the
total cost.
Using more difficult tests for spmas, symba-1 and symba-2 shows that
the solution is found slightly faster for spmas compared to both
symba-1 and symba-2 while still finding the optimal solution.
